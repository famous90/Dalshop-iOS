/* This file was generated by the ServiceGenerator.
 * The ServiceGenerator is Copyright (c) 2014 Google Inc.
 */

//
//  GTLQueryFlagengine.m
//

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   flagengine/v1
// Description:
//   This is an API
// Classes:
//   GTLQueryFlagengine (44 custom class methods, 29 custom properties)

#import "GTLQueryFlagengine.h"

#import "GTLFlagengineBeacon.h"
#import "GTLFlagengineBeaconCollection.h"
#import "GTLFlagengineBranchItemMatcher.h"
#import "GTLFlagengineFeedbackMessage.h"
#import "GTLFlagengineFlag.h"
#import "GTLFlagengineFlagCollection.h"
#import "GTLFlagengineItem.h"
#import "GTLFlagengineItemCollection.h"
#import "GTLFlagengineLike.h"
#import "GTLFlagengineNotice.h"
#import "GTLFlagengineProvider.h"
#import "GTLFlagengineProviderForm.h"
#import "GTLFlagengineRetainForm.h"
#import "GTLFlagengineReward.h"
#import "GTLFlagengineRewardCollection.h"
#import "GTLFlagengineShop.h"
#import "GTLFlagengineShopCollection.h"
#import "GTLFlagengineUploadUrl.h"
#import "GTLFlagengineUser.h"
#import "GTLFlagengineUserForm.h"
#import "GTLFlagengineVersion.h"

@implementation GTLQueryFlagengine

@dynamic barcodeId, beaconId, descriptionProperty, fields, flagId, identifier,
         ids, imageUrl, itemId, lat, liked, likes, logoUrl, lon, mark, name,
         oldPrice, parentId, price, providerId, reward, rewardable, rewarded,
         sale, shopId, tag, thumbnailUrl, type, userId;

+ (NSDictionary *)parameterNameMap {
  NSDictionary *map =
    [NSDictionary dictionaryWithObjectsAndKeys:
      @"description", @"descriptionProperty",
      @"id", @"identifier",
      nil];
  return map;
}

+ (NSDictionary *)arrayPropertyToClassMap {
  NSDictionary *map =
    [NSDictionary dictionaryWithObject:[NSNumber class]
                                forKey:@"ids"];
  return map;
}

#pragma mark -
#pragma mark "apps.feedbacks" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForAppsFeedbacksInsertWithObject:(GTLFlagengineFeedbackMessage *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.apps.feedbacks.insert";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  return query;
}

#pragma mark -
#pragma mark "apps.notices" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForAppsNoticesGet {
  NSString *methodName = @"flagengine.apps.notices.get";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineNotice class];
  return query;
}

+ (id)queryForAppsNoticesInsertWithObject:(GTLFlagengineNotice *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.apps.notices.insert";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineNotice class];
  return query;
}

#pragma mark -
#pragma mark "apps.versions" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForAppsVersionsGet {
  NSString *methodName = @"flagengine.apps.versions.get";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineVersion class];
  return query;
}

+ (id)queryForAppsVersionsInsertWithObject:(GTLFlagengineVersion *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.apps.versions.insert";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineVersion class];
  return query;
}

#pragma mark -
#pragma mark "beacons" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForBeaconsDeleteWithObject:(GTLFlagengineBeacon *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.beacons.delete";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  return query;
}

+ (id)queryForBeaconsGetWithBeaconId:(NSString *)beaconId {
  NSString *methodName = @"flagengine.beacons.get";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.beaconId = beaconId;
  query.expectedObjectClass = [GTLFlagengineShop class];
  return query;
}

#pragma mark -
#pragma mark "beacons.get" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForBeaconsGetAll {
  NSString *methodName = @"flagengine.beacons.get.all";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineBeaconCollection class];
  return query;
}

#pragma mark -
#pragma mark "beacons" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForBeaconsInsertWithObject:(GTLFlagengineBeacon *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.beacons.insert";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineBeacon class];
  return query;
}

#pragma mark -
#pragma mark "flags" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForFlagsDeleteWithFlagId:(long long)flagId {
  NSString *methodName = @"flagengine.flags.delete";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.flagId = flagId;
  return query;
}

+ (id)queryForFlagsInsertWithObject:(GTLFlagengineFlag *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.flags.insert";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineFlag class];
  return query;
}

+ (id)queryForFlagsList {
  NSString *methodName = @"flagengine.flags.list";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineFlagCollection class];
  return query;
}

#pragma mark -
#pragma mark "flags.list" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForFlagsListByshop {
  NSString *methodName = @"flagengine.flags.list.byshop";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineFlagCollection class];
  return query;
}

+ (id)queryForFlagsListClose {
  NSString *methodName = @"flagengine.flags.list.close";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineFlagCollection class];
  return query;
}

#pragma mark -
#pragma mark "images.uploadUrl" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForImagesUploadUrlGet {
  NSString *methodName = @"flagengine.images.uploadUrl.get";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineUploadUrl class];
  return query;
}

#pragma mark -
#pragma mark "items.branch" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForItemsBranchExposeWithObject:(GTLFlagengineBranchItemMatcher *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.items.branch.expose";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineBranchItemMatcher class];
  return query;
}

+ (id)queryForItemsBranchHide {
  NSString *methodName = @"flagengine.items.branch.hide";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  return query;
}

+ (id)queryForItemsBranchRewardWithObject:(GTLFlagengineBranchItemMatcher *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.items.branch.reward";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineBranchItemMatcher class];
  return query;
}

#pragma mark -
#pragma mark "items" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForItemsDelete {
  NSString *methodName = @"flagengine.items.delete";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  return query;
}

+ (id)queryForItemsGet {
  NSString *methodName = @"flagengine.items.get";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineItem class];
  return query;
}

+ (id)queryForItemsInit {
  NSString *methodName = @"flagengine.items.init";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineItemCollection class];
  return query;
}

+ (id)queryForItemsInsertWithObject:(GTLFlagengineItem *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.items.insert";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineItem class];
  return query;
}

+ (id)queryForItemsList {
  NSString *methodName = @"flagengine.items.list";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineItemCollection class];
  return query;
}

+ (id)queryForItemsPatch {
  NSString *methodName = @"flagengine.items.patch";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineItem class];
  return query;
}

+ (id)queryForItemsUpdateWithObject:(GTLFlagengineItem *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.items.update";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineItem class];
  return query;
}

#pragma mark -
#pragma mark "likes" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForLikesDelete {
  NSString *methodName = @"flagengine.likes.delete";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  return query;
}

#pragma mark -
#pragma mark "likes.delete" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForLikesDeleteAll {
  NSString *methodName = @"flagengine.likes.delete.all";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  return query;
}

#pragma mark -
#pragma mark "likes" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForLikesInsertWithObject:(GTLFlagengineLike *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.likes.insert";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineLike class];
  return query;
}

#pragma mark -
#pragma mark "providers" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForProvidersGetWithObject:(GTLFlagengineProviderForm *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.providers.get";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineProvider class];
  return query;
}

+ (id)queryForProvidersInsertWithObject:(GTLFlagengineProviderForm *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.providers.insert";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineProvider class];
  return query;
}

#pragma mark -
#pragma mark "rewards" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForRewardsInsertWithObject:(GTLFlagengineReward *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.rewards.insert";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineUser class];
  return query;
}

+ (id)queryForRewardsList {
  NSString *methodName = @"flagengine.rewards.list";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineRewardCollection class];
  return query;
}

#pragma mark -
#pragma mark "shops" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForShopsDeleteWithShopId:(long long)shopId {
  NSString *methodName = @"flagengine.shops.delete";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.shopId = shopId;
  return query;
}

+ (id)queryForShopsGet {
  NSString *methodName = @"flagengine.shops.get";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineShop class];
  return query;
}

+ (id)queryForShopsInit {
  NSString *methodName = @"flagengine.shops.init";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineShopCollection class];
  return query;
}

+ (id)queryForShopsInsertWithObject:(GTLFlagengineShop *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.shops.insert";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineShop class];
  return query;
}

+ (id)queryForShopsList {
  NSString *methodName = @"flagengine.shops.list";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineShopCollection class];
  return query;
}

#pragma mark -
#pragma mark "shops.list" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForShopsListProvider {
  NSString *methodName = @"flagengine.shops.list.provider";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineShopCollection class];
  return query;
}

#pragma mark -
#pragma mark "shops" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForShopsPatch {
  NSString *methodName = @"flagengine.shops.patch";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineShop class];
  return query;
}

+ (id)queryForShopsUpdateWithObject:(GTLFlagengineShop *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.shops.update";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineShop class];
  return query;
}

#pragma mark -
#pragma mark "users" methods
// These create a GTLQueryFlagengine object.

+ (id)queryForUsersGetWithObject:(GTLFlagengineUserForm *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.users.get";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineUser class];
  return query;
}

+ (id)queryForUsersGuest {
  NSString *methodName = @"flagengine.users.guest";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.expectedObjectClass = [GTLFlagengineUser class];
  return query;
}

+ (id)queryForUsersInsertWithObject:(GTLFlagengineUserForm *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.users.insert";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineUser class];
  return query;
}

+ (id)queryForUsersRetainWithObject:(GTLFlagengineRetainForm *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"flagengine.users.retain";
  GTLQueryFlagengine *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLFlagengineUser class];
  return query;
}

@end
