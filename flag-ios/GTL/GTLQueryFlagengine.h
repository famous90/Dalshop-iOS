/* This file was generated by the ServiceGenerator.
 * The ServiceGenerator is Copyright (c) 2014 Google Inc.
 */

//
//  GTLQueryFlagengine.h
//

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   flagengine/v1
// Description:
//   This is an API
// Classes:
//   GTLQueryFlagengine (44 custom class methods, 29 custom properties)

#if GTL_BUILT_AS_FRAMEWORK
  #import "GTL/GTLQuery.h"
#else
  #import "GTLQuery.h"
#endif

@class GTLFlagengineBeacon;
@class GTLFlagengineBranchItemMatcher;
@class GTLFlagengineFeedbackMessage;
@class GTLFlagengineFlag;
@class GTLFlagengineItem;
@class GTLFlagengineLike;
@class GTLFlagengineNotice;
@class GTLFlagengineProviderForm;
@class GTLFlagengineRetainForm;
@class GTLFlagengineReward;
@class GTLFlagengineShop;
@class GTLFlagengineUserForm;
@class GTLFlagengineVersion;

@interface GTLQueryFlagengine : GTLQuery

//
// Parameters valid on all methods.
//

// Selector specifying which fields to include in a partial response.
@property (copy) NSString *fields;

//
// Method-specific parameters; see the comments below for more information.
//
@property (copy) NSString *barcodeId;
@property (copy) NSString *beaconId;
// Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
@property (copy) NSString *descriptionProperty;
@property (assign) long long flagId;
// identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
@property (assign) long long identifier;
@property (retain) NSArray *ids;  // of NSNumber (longLongValue)
@property (copy) NSString *imageUrl;
@property (assign) long long itemId;
@property (assign) double lat;
@property (assign) BOOL liked;
@property (assign) NSInteger likes;
@property (copy) NSString *logoUrl;
@property (assign) double lon;
@property (assign) NSInteger mark;
@property (copy) NSString *name;
@property (copy) NSString *oldPrice;
@property (assign) long long parentId;
@property (copy) NSString *price;
@property (assign) long long providerId;
@property (assign) NSInteger reward;
@property (assign) BOOL rewardable;
@property (assign) BOOL rewarded;
@property (assign) NSInteger sale;
@property (assign) long long shopId;
@property (assign) long long tag;
@property (copy) NSString *thumbnailUrl;
@property (assign) NSInteger type;
@property (assign) long long userId;

#pragma mark -
#pragma mark "apps.feedbacks" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.apps.feedbacks.insert
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
+ (id)queryForAppsFeedbacksInsertWithObject:(GTLFlagengineFeedbackMessage *)object;

#pragma mark -
#pragma mark "apps.notices" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.apps.notices.get
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineNotice.
+ (id)queryForAppsNoticesGet;

// Method: flagengine.apps.notices.insert
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineNotice.
+ (id)queryForAppsNoticesInsertWithObject:(GTLFlagengineNotice *)object;

#pragma mark -
#pragma mark "apps.versions" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.apps.versions.get
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineVersion.
+ (id)queryForAppsVersionsGet;

// Method: flagengine.apps.versions.insert
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineVersion.
+ (id)queryForAppsVersionsInsertWithObject:(GTLFlagengineVersion *)object;

#pragma mark -
#pragma mark "beacons" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.beacons.delete
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
+ (id)queryForBeaconsDeleteWithObject:(GTLFlagengineBeacon *)object;

// Method: flagengine.beacons.get
//  Optional:
//   userId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineShop.
+ (id)queryForBeaconsGetWithBeaconId:(NSString *)beaconId;

#pragma mark -
#pragma mark "beacons.get" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.beacons.get.all
//  Optional:
//   tag: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineBeaconCollection.
+ (id)queryForBeaconsGetAll;

#pragma mark -
#pragma mark "beacons" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.beacons.insert
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineBeacon.
+ (id)queryForBeaconsInsertWithObject:(GTLFlagengineBeacon *)object;

#pragma mark -
#pragma mark "flags" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.flags.delete
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
+ (id)queryForFlagsDeleteWithFlagId:(long long)flagId;

// Method: flagengine.flags.insert
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineFlag.
+ (id)queryForFlagsInsertWithObject:(GTLFlagengineFlag *)object;

// Method: flagengine.flags.list
//  Optional:
//   lat: double
//   lon: double
//   userId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineFlagCollection.
+ (id)queryForFlagsList;

#pragma mark -
#pragma mark "flags.list" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.flags.list.byshop
//  Optional:
//   shopId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineFlagCollection.
+ (id)queryForFlagsListByshop;

// Method: flagengine.flags.list.close
//  Optional:
//   lat: double
//   lon: double
//   userId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineFlagCollection.
+ (id)queryForFlagsListClose;

#pragma mark -
#pragma mark "images.uploadUrl" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.images.uploadUrl.get
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineUploadUrl.
+ (id)queryForImagesUploadUrlGet;

#pragma mark -
#pragma mark "items.branch" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.items.branch.expose
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineBranchItemMatcher.
+ (id)queryForItemsBranchExposeWithObject:(GTLFlagengineBranchItemMatcher *)object;

// Method: flagengine.items.branch.hide
//  Optional:
//   itemId: long long
//   shopId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
+ (id)queryForItemsBranchHide;

// Method: flagengine.items.branch.reward
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineBranchItemMatcher.
+ (id)queryForItemsBranchRewardWithObject:(GTLFlagengineBranchItemMatcher *)object;

#pragma mark -
#pragma mark "items" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.items.delete
//  Optional:
//   itemId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
+ (id)queryForItemsDelete;

// Method: flagengine.items.get
//  Optional:
//   itemId: long long
//   userId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineItem.
+ (id)queryForItemsGet;

// Method: flagengine.items.init
//  Optional:
//   mark: NSInteger
//   userId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineItemCollection.
+ (id)queryForItemsInit;

// Method: flagengine.items.insert
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineItem.
+ (id)queryForItemsInsertWithObject:(GTLFlagengineItem *)object;

// Method: flagengine.items.list
//  Optional:
//   shopId: long long
//   userId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineItemCollection.
+ (id)queryForItemsList;

// Method: flagengine.items.patch
//  Optional:
//   barcodeId: NSString
//   descriptionProperty: NSString
//   identifier: long long
//   liked: BOOL
//   likes: NSInteger
//   name: NSString
//   oldPrice: NSString
//   price: NSString
//   reward: NSInteger
//   rewardable: BOOL
//   rewarded: BOOL
//   sale: NSInteger
//   shopId: long long
//   thumbnailUrl: NSString
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineItem.
+ (id)queryForItemsPatch;

// Method: flagengine.items.update
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineItem.
+ (id)queryForItemsUpdateWithObject:(GTLFlagengineItem *)object;

#pragma mark -
#pragma mark "likes" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.likes.delete
//  Optional:
//   itemId: long long
//   type: NSInteger
//   userId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
+ (id)queryForLikesDelete;

#pragma mark -
#pragma mark "likes.delete" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.likes.delete.all
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
+ (id)queryForLikesDeleteAll;

#pragma mark -
#pragma mark "likes" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.likes.insert
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineLike.
+ (id)queryForLikesInsertWithObject:(GTLFlagengineLike *)object;

#pragma mark -
#pragma mark "providers" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.providers.get
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineProvider.
+ (id)queryForProvidersGetWithObject:(GTLFlagengineProviderForm *)object;

// Method: flagengine.providers.insert
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineProvider.
+ (id)queryForProvidersInsertWithObject:(GTLFlagengineProviderForm *)object;

#pragma mark -
#pragma mark "rewards" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.rewards.insert
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineUser.
+ (id)queryForRewardsInsertWithObject:(GTLFlagengineReward *)object;

// Method: flagengine.rewards.list
//  Optional:
//   userId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineRewardCollection.
+ (id)queryForRewardsList;

#pragma mark -
#pragma mark "shops" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.shops.delete
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
+ (id)queryForShopsDeleteWithShopId:(long long)shopId;

// Method: flagengine.shops.get
//  Optional:
//   identifier: long long
//   userId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineShop.
+ (id)queryForShopsGet;

// Method: flagengine.shops.init
//  Optional:
//   lat: double
//   lon: double
//   userId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineShopCollection.
+ (id)queryForShopsInit;

// Method: flagengine.shops.insert
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineShop.
+ (id)queryForShopsInsertWithObject:(GTLFlagengineShop *)object;

// Method: flagengine.shops.list
//  Optional:
//   ids: NSArray
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineShopCollection.
+ (id)queryForShopsList;

#pragma mark -
#pragma mark "shops.list" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.shops.list.provider
//  Optional:
//   providerId: long long
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineShopCollection.
+ (id)queryForShopsListProvider;

#pragma mark -
#pragma mark "shops" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.shops.patch
//  Optional:
//   descriptionProperty: NSString
//   identifier: long long
//   imageUrl: NSString
//   liked: BOOL
//   likes: NSInteger
//   logoUrl: NSString
//   name: NSString
//   parentId: long long
//   providerId: long long
//   reward: NSInteger
//   rewarded: BOOL
//   type: NSInteger
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineShop.
+ (id)queryForShopsPatch;

// Method: flagengine.shops.update
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineShop.
+ (id)queryForShopsUpdateWithObject:(GTLFlagengineShop *)object;

#pragma mark -
#pragma mark "users" methods
// These create a GTLQueryFlagengine object.

// Method: flagengine.users.get
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineUser.
+ (id)queryForUsersGetWithObject:(GTLFlagengineUserForm *)object;

// Method: flagengine.users.guest
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineUser.
+ (id)queryForUsersGuest;

// Method: flagengine.users.insert
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineUser.
+ (id)queryForUsersInsertWithObject:(GTLFlagengineUserForm *)object;

// Method: flagengine.users.retain
//  Authorization scope(s):
//   kGTLAuthScopeFlagengineUserinfoEmail
// Fetches a GTLFlagengineUser.
+ (id)queryForUsersRetainWithObject:(GTLFlagengineRetainForm *)object;

@end
